/*
 emu86, 86 emulator for arduino,
 Microcomputer systems: the 8088/8086 family, 2nd Ed, Prentice-Hall
 used as a refrence.
 Murray Smith, 4/4/14
 */
//A few defines for the registers
#define REG_AX 0x00
#define REG_CX 0x01
#define REG_DX 0x02
#define REG_BX 0x03
#define REG_SP 0x04
#define REG_BP 0x05
#define REG_SI 0x06
#define REG_DI 0x07

#define REG_AL 0x00
#define REG_CL 0x01
#define REG_DX 0x02
#define REG_BX 0x03
#define REG_AH 0x04
#define REG_CH 0x05
#define REG_DH 0x06
#define REG_BH 0x07

#define REG_ES 0x00
#define REG_CS 0x01
#define REG_SS 0x02
#define REG_DS 0x04

typedef struct regs{
  //Data registers
  unsigned int ax;
  unsigned int bx;
  unsigned int cx;
  unsigned int dx;

  //pointers
  unsigned int sp;
  unsigned int bp;
  unsigned int si;
  unsigned int di;
  unsigned long ip;  //should be 20bits in size.

  //segments
  unsigned int cs;
  unsigned int ss;
  unsigned int ds;
  unsigned int es;
} regs_t;

typedef struct cpu{
  //cpu register's including IP.
  regs_t regs;
  //Program status word. ie flags.
  byte psw;
  //Instruction queue, some instructions are 6 bytes in length.
  byte i_q[6];
  unsigned int dataBus;
  unsigned int addressBus;
} cpu_t;

cpu_t cpu86;

typedef void (*__opcode_handler_t)(void);

typedef struct opcode_table{
  // byte opcode;
  __opcode_handler_t opcode_handler;
} opcode_table_t;

#define FLAG_CF 1
#define FLAG_PF 2
#define FLAG_AF 4
#define FLAG_ZF 6
#define FLAG_SF 7
#define FLAG_TF 8
#define FLAG_IFL 9
#define FLAG_DF 10
#define FLAG_OF 11

void setFlagPSW( byte &psw, byte flag){
  psw |= flag;
}

//Decode and return true if a flag is set.
boolean decodePSW( byte psw, byte flag ){
  byte temp = psw;
  if( flag == FLAG_CF ){
    return temp & 1;
  }
  return (( temp >> flag ) & 1);
}

void clearFlagPSW( byte &psw, byte flag){
  psw ^= flag;
}

//increment intstruction pointer.
//needs to take last instruction into account.
byte last_inst_size;
void inc_ip(void){
};

//opcode functions.
//if the cpu reads an invalid instruction.
void noop86(void){
  last_inst_size = 1;
};

//There are Seven types of mov,
//Each can be detected via the opcode.
void mov86(void){
  //i_q holds the six bytes of a potential instruction.
  switch( cpu86.i_q[0] ){
    //Type 1, reg/mem mov.
  case 136:
  case 137:
  case 138:
  case 139:
    last_inst_size = 4;
    break;
    //type 2 immediate to reg/mem
    //byte
  case 196:
    //word
  case 199:
    last_inst_size = 6;
    break;
    //case 3 immediate to reg
    //byte
  case 176:
  case 177:
  case 178:
  case 179:
  case 180:
  case 181:
  case 182:
  case 183:
    //word
  case 184:
  case 185:
  case 186:
  case 187:
  case 188:
  case 189:
  case 190:
  case 191:
    last_inst_size = 3;
    break;
  //case 4 mem to acc
  //byte
  case 160:
  //word
  case 161:
    last_inst_size = 3;
    break;
  //case 5 acc to mem
  //byte
  case 162:
  //word
  case 163:
    last_inst_size = 3;
    break;
  //case 6 reg/mem to segment
  case 142:
    last_inst_size = 4;
    break;
  //case 7 segment to reg/mem
  case 140:
    last_inst_size = 4;
    break;  
  default:
    break;    
  }
  last_inst_size = 6;
};

//push reg/mem to stack
void push86(void){
  switch(cpu86.i_q[0]){
     //push reg/mem
     case 255:
       last_inst_size = 4;
       break;
     case 80:
     case 81:
     case 82:
     case 83:
     case 84:
     case 85:
     case 86:
     case 87:
       last_inst_size = 1;
       break;
     case 6:
     case 14:
       last_inst_size = 1;
       break;
     default:
       break;
  }
};

//pop reg/mem to stack, also adc type 3?
void pop86(void){
  switch( cpu86.i_q[0]){
      case 2:
      case 3:
      case 4:
      break;
      default:
      break;
    }
  last_inst_size = 1;
};

//exchange reg/mem with accumulator.
void xchg86(void){
    switch( cpu86.i_q[0]){
      case 2:
      case 3:
      case 4:
      break;
      default:
      break;
    }
  last_inst_size = 1;
};

//in from port, byte or word, fixed or variable port
void in86(void){
  last_inst_size = 1;
};

//out to port, byte or word, fixed or variable length.
void out86(void){
  last_inst_size = 1;
};
void xlat86(void){
  last_inst_size = 1;
};
void lea86(void){
  last_inst_size = 1;
};
void lds86(void){
  last_inst_size = 1;
};
void les86(void){
  last_inst_size = 1;
};
void lahf86(void){
  last_inst_size = 1;
};
void sahf86(void){
  last_inst_size = 1;
};
void pushf86(void){
  last_inst_size = 1;
};
void popf86(void){
  last_inst_size = 1;
};
void add86(void){
  //need to check bit 4 to see if this is a adc
  last_inst_size = 1;
};
void adc86(void){
  last_inst_size = 1;
};
void inc86(void){
  last_inst_size = 1;
};
void aaa86(void){
  last_inst_size = 1;
};
void daa86(void){
  last_inst_size = 1;
};
void sub86(void){
  last_inst_size = 1;
};
void dec86(void){
  last_inst_size = 1;
};
void neg86(void){
  last_inst_size = 1;
};
void cmp86(void){
  last_inst_size = 1;
};
void aas86(void){
  last_inst_size = 1;
};
void das86(void){
  last_inst_size = 1;
};
void mul86(void){
  last_inst_size = 1;
};
void imul86(void){
  last_inst_size = 1;
};
void aam86(void){
  last_inst_size = 1;
};
void div86(void){
  last_inst_size = 1;
};
void idiv86(void){
  last_inst_size = 1;
};
void aad86(void){
  last_inst_size = 1;
};
void cbw86(void){
  last_inst_size = 1;
};
void cwd86(void){
  last_inst_size = 1;
};
void not86(void){
  last_inst_size = 1;
};
void shl86(void){
  last_inst_size = 1;
}; //sal
void shr86(void){
  last_inst_size = 1;
};
void sar86(void){
  last_inst_size = 1;
};
void rol86(void){
  last_inst_size = 1;
};
void ror86(void){
  last_inst_size = 1;
};
void rcl86(void){
  last_inst_size = 1;
};
void rcr86(void){
  last_inst_size = 1;
};
void and86(void){
  last_inst_size = 1;
};
void test86(void){
  last_inst_size = 1;
};
void or86(void){
  last_inst_size = 1;
};
void xor86(void){
  last_inst_size = 1;
};
//String manipulation
void rep86(void){
  last_inst_size = 1;
};
void movs86(void){
  last_inst_size = 1;
};
void cmps86(void){
  last_inst_size = 1;
};
void scas86(void){
  last_inst_size = 1;
};
void lods86(void){
  last_inst_size = 1;
};
void stds86(void){
  last_inst_size = 1;
};
void call86(void){
  last_inst_size = 1;
};
void jmp86(void){
  last_inst_size = 1;
};
void ret86(void){
  last_inst_size = 1;
};
void je86(void){
  last_inst_size = 1;
};
void jl86(void){
  last_inst_size = 1;
};
void jle86(void){
  last_inst_size = 1;
};
void jb86(void){
  last_inst_size = 1;
};
void jbe86(void){
  last_inst_size = 1;
};
void jp86(void){
  last_inst_size = 1;
};
void jo86(void){
  last_inst_size = 1;
};
void js86(void){
  last_inst_size = 1;
};
void jne86(void){
  last_inst_size = 1;
};
void jnl86(void){
  last_inst_size = 1;
};
void jnle86(void){
  last_inst_size = 1;
};
void jnb86(void){
  last_inst_size = 1;
};
void jnbe86(void){
  last_inst_size = 1;
};
void jnp86(void){
  last_inst_size = 1;
};
void jno86(void){
  last_inst_size = 1;
};
void jns86(void){
  last_inst_size = 1;
};
void loop86(void){
  last_inst_size = 1;
};
void loopz86(void){
  last_inst_size = 1;
};
void loopnz86(void){
  last_inst_size = 1;
};
void jcxz86(void){
  last_inst_size = 1;
};
//interupts, oh joy
void int86(void){
  last_inst_size = 1;
};
void into86(void){
  last_inst_size = 1;
};
void iret86(void){
  last_inst_size = 1;
};

//processor controll
//clear carry flag
void clc86(void){
  clearFlagPSW( cpu86.psw, FLAG_CF );
  last_inst_size = 1;
};

//complement carry flag, NOT psw(FLAG_CF)
void cmc86(void){  
  last_inst_size = 1;
};

//Set carry flag, bitwise or
void stc86(void){
  last_inst_size = 1;
};

//Clear direction flag
void cld86(void){
  last_inst_size = 1;
};

//
void rstd86(void){
  last_inst_size = 1;
};

//Start interupts
void sti86(void){
  last_inst_size = 1;
};

//Clear interupts
void rcli86(void){
  last_inst_size = 1;
};

//Halt the processor
void hlt86(void){
  last_inst_size = 1;
};

//Wait for external device.
void wait86(void){
  last_inst_size = 1;
};

//Let external device run
void esc86(void){
  last_inst_size = 1;
};

//
void lock86(void){
  last_inst_size = 1;
};

//
void segment86(void){
  last_inst_size = 1;
};

//By the way this bit was fun.........not
opcode_table_t opcode_table[] = {
  //add reg/mem to eihter
  add86,   //0 add from reg byte
  add86,   //1 add from reg word
  add86,   //2 add to reg byte
  add86,   //3 add to reg word

  //add immediate to accumilator
  add86,   //4 add byte
  add86,   //5 add word

  //push and pop segment registers
  push86,    //6   es, push segment register
  pop86,     //7   es, pop segment register
  push86,    //14  cs, push segment register
  pop86,     //15  cs, pop segment register

  //adc
  adc86,     //16  from reg, byte
  adc86,     //17  from reg, word
  adc86,     //18  to reg, byte
  adc86,     //19  to reg, word

  //adc acumilator
  adc86,     //20 byte
  adc86,     //21 word

  //push and pop
  push86,    //22  ss, push segment register
  pop86,     //23  ss, pop segment register
  push86,    //30  ds, push segment register
  pop86,     //31  ds, pop segment register

  //push register
  push86,    //80  AX
  push86,    //81  CX
  push86,    //82  DX
  push86,    //83  BX
  push86,    //84  SP
  push86,    //85  BP
  push86,    //86  SI
  push86,    //87  DI

  //pop register
  pop86,    //88 AX
  pop86,    //89 CX
  pop86,    //90 DX
  pop86,    //91 BX
  pop86,    //92 SP
  pop86,    //93 BP
  pop86,    //94 SI
  pop86,    //95 DI

  //add immediate to reg/mem, adc second byte of opcode.
  add86,     //128 unsigned byte, valid?
  add86,     //129 unsigned word
  add86,     //130
  add86,     //131

  //exchange, reg/mem with reg
  xchg86,    //134  byte
  xchg86,    //135  word

  //mov, 7 types of mov
  // type 1 reg/mem to/from reg
  mov86,     //136    from reg, byte inst
  mov86,     //137    from reg, word inst
  mov86,     //138    to   reg, byte inst
  mov86,     //139    to   reg, word inst

  //type 7, segment to reg/mem
  mov86,     //140

  //lea
  lea86,     //141

  //type 6, reg/mem to segment
  mov86,     //142

  //pop reg/mem
  pop86,     //143

  //exchange reg with accumilator
  xchg86,    //144 ax
  xchg86,    //145 cx
  xchg86,    //146 dx
  xchg86,    //147 bx
  xchg86,    //148 sp
  xchg86,    //149 bp
  xchg86,    //150 si
  xchg86,    //151 di  

  //pushf
  pushf86,   //156
  //popf
  popf86,    //157
  //sahf
  sahf86,    //158
  //lahf
  lahf86,    //159

  //type 4, memory to accum
  mov86,     //160    byte
  mov86,     //161    word
  //type 5, accum to memory
  mov86,    //162      byte
  mov86,    //163      word

  // type 3 imediate to reg
  mov86,     //176   byte, reg al    
  mov86,     //177   byte, reg cl
  mov86,     //178   byte, reg dl
  mov86,     //179   byte, reg bl 
  mov86,     //180   byte, reg ah
  mov86,     //181   byte, reg ch
  mov86,     //182   byte, reg dh
  mov86,     //183   byte, reg bh
  mov86,     //184   word, reg ax
  mov86,     //185   word, reg cx
  mov86,     //186   word, reg dx
  mov86,     //187   word, reg bx
  mov86,     //188   word, reg sp
  mov86,     //189   word, reg bp
  mov86,     //190   word, reg si
  mov86,     //191   word, reg di

  //les
  les86,    //196
  //lds
  lds86,    //197

  // type 2 imediate to reg/memory
  mov86,     //198    byte instr
  mov86,     //199    word instr

  //xlat
  xlat86,    //215

  //in fixed port
  in86,      //228 byte
  in86,      //229 word
  //out fixed port
  out86,     //230 byte
  out86,     //231 word

  //in variable port
  in86,      //236 byte
  in86,      //237 word
  //out variable port
  out86,     //238 byte
  out86,     //239 word 
  //push reg/mem, inc, also check 2nd opcode byte
  push86   //255
};



//emulate a power on reset.
//could use rand for most of these.
void cpu_reset(){
  //clear registers, program status word.
  cpu86.psw = 0;

  //general purpose
  cpu86.regs.ax = 0;
  cpu86.regs.bx = 0;
  cpu86.regs.cx = 0;
  cpu86.regs.dx = 0;

  //ponters
  cpu86.regs.sp = 0;
  cpu86.regs.bp = 0;
  cpu86.regs.si = 0;
  cpu86.regs.di = 0;
  cpu86.regs.ip = 0;

  //segments
  cpu86.regs.cs = 0;
  cpu86.regs.ss = 0;
  cpu86.regs.ds = 0;
  cpu86.regs.es = 0;
}

//
void genAddress(){
  //cpu86.addressBus = 0;
}

void setup(){
  //Serial.begin(9600); //about 1k of code.
  cpu_reset();
  //genAddress(cpu86);
}

byte opcode = 0;
void loop(){

  //get 6 bytes of code into cpu86.i_q
  //decode first byte, via
  //genAddress(cpu86);
  inc_ip();
  opcode = cpu86.i_q[0];
  opcode_table[opcode];
  //shift data via data/address/status pins
}



